#!/usr/bin/env python3
# FILE TERENKRIPSI
import base64
exec(__import__('base64').b64decode('').decode('utf-8'))
